1.
a)
generate(begin(v), end(v), [](){ return rand() % 100; });
b)
all_of(begin(v), end(v), [&a, d](auto e) {
	int temp = a; a += d; return e == temp;
});
c)
int mul(int x, int y) { return x * y; }
accumulate(begin(v), end(v), 1, mul);
d)
any_of(begin(v), end(v), [f](int e) { return e % f == 0; });
e)
sort(begin(v), end(v));
mismatch(begin(v), end(v), begin(s)) ;

2.
a) Write a function to find the position of the ith occurrence of a given element.
auto find_ith_occurence(auto first, auto  last, auto val, int i) -> decltype(first)
{
	auto pos = first;
    while(i-- && (pos  = find(pos, last, val)) != last)
	{
		 
	}
	return pos;
}
// hint: you may want to use find repeatedly

b) Write a function to find the sum of elements in a vector ignoring the smallest and the biggest.
int find_sum(auto first, auto last)
{
	int s = 0;
	// assume that the vector is not empty
	int min = *first;
	int max = *first;
	for_each(first, last, [&s, &min, &max](int e){
		s += e;
		if(min < e) min = e;
		if(max > e) max = e;
	});
	return s -(min + max);
}

3.
What care should we take while returning a 
reference to a variable from a function?
- should have life in the calling environment

What are the differences between generic find
 and find of set?
- generic find : linear, expects == operator, works on a range
  set find : logarithmic, uses the predicate of the type, works on the whole data structure

What does find return when it fails to find 
a match? Why?
- returns the second arg for find - which is beyond the valid range. can return anything in not a valid range.

What happens in this code?
[](auto e){ cout <<  e  + e; }(10);
- 20
map<int, vector<int> > m;
add the element to a map with key 5 and value vector containing 5, 10, 15, 20.

m.insert(make_pair(5, vector<int>{5, 10, 15, 20}));


